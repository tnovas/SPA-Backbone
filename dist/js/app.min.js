/*! 
* Web - v1.0.0
* Copyright (c) 2014 Tomas Novas 
*  
*/ 

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'undefined' ? null : require;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, i, ext;
		path = path.split(/[\\/]/);
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"Web": {
		"app": {
			"Initializer.js": function (exports, module, require) {
				
				module.exports = function(){
				  require('./app').start();
				};
			},
			"app.js": function (exports, module, require) {
				var LayoutView = require('./views/layout/LayoutView'),
					Routers = require('./routers/RouterApp');
				
				var app = module.exports = new Backbone.Marionette.Application();
				
				app.addInitializer(function(){
				
					app.addRegions({
						container: 'body'
					});
				
					app.layout = new LayoutView();
				
					app.container.show(app.layout);
				
					app.router = new Routers({
						app: app
					});
				
					Backbone.history.start();
				
					Backbone.history.on("all", function () {
				    	var active = $('ul.nav.navbar-nav li [href="#/' + Backbone.history.fragment + '"]').parent();
						var noActive = $('ul.nav.navbar-nav li').not(active);
						active.addClass('active');
						noActive.removeClass('active');
				
						var routeName = Backbone.history.fragment;
						$('.panel-title').text(routeName.charAt(0).toUpperCase() + routeName.slice(1));
					});
				});
			},
			"controllers": {
				"home": {
					"home.js": function (exports, module, require) {
						var Home = require('../../models/home/home');
						
						module.exports = function(){
							var home;
							
							Backbone.ajax({
							    dataType: "json",
							    url: "api/home",
							    async: false,
							    success: function(val){	    	
						    		home = new Home(val);	
							    }
							});
						
							return home;
						}; 
					}
				},
				"products": {
					"products.js": function (exports, module, require) {
						var Products = require('../../models/products/product');
						
						module.exports = function(){
							var products;
						
							Backbone.ajax({
							    dataType: "json",
							    url: "api/products",
							    async: false,
							    success: function(val){
							        products = new Products(val);
							    }
							});
						
							return products;
						}; 
					}
				}
			},
			"initDev.js": function (exports, module, require) {
				
				$(function() {
				
				  // Development configurations
				  require('./Initializer')({
				    enviroment: 'development'
				  });
				
				});
			},
			"models": {
				"home": {
					"home.js": function (exports, module, require) {
						module.exports = Backbone.Model.extend({
							defaults : {
								description: ''
							}
						});
					}
				},
				"products": {
					"product.js": function (exports, module, require) {
						var product = Backbone.Model.extend({
							defaults: {
								title: '',
								description: '',
								image: ''
							}
						});
						
						module.exports = Backbone.Collection.extend({
							model: product
						});
					}
				}
			},
			"routers": {
				"RouterApp.js": function (exports, module, require) {
					module.exports = Backbone.Router.extend({
						routes: {
							'inicio': 'home',
							'productos': 'products',
							'contacto': 'contact'
						},
					
						initialize: function(options) {
							this.app = options.app;
						},
					
						home: function() {
							this.app.layout.showHome();
						},
					
						products: function() {
							this.app.layout.showProducts();
						},
					
						contact: function() {
							this.app.layout.showContact();
						}
					});
				}
			},
			"views": {
				"Contact": {
					"ContactView.js": function (exports, module, require) {
						var ContactTemplate = require('../templates/Contact/Contact');
						
						module.exports = Backbone.Marionette.ItemView.extend({
							template: ContactTemplate
						});
					}
				},
				"home": {
					"HomeView.js": function (exports, module, require) {
						var HomeTemplate = require('../templates/home/home');
						
						module.exports = Backbone.Marionette.ItemView.extend({
							tagName: 'p',
							template: HomeTemplate,
						
							initialize: function(){
								this.model = require('../../controllers/home/home')();
							}
						});
					}
				},
				"layout": {
					"LayoutView.js": function (exports, module, require) {
						var ProductsView = require('../products/ProductsView'),
							HomeView = require('../home/HomeView'),
							ContactView = require('../Contact/ContactView');
						
						module.exports = Backbone.Marionette.LayoutView.extend({
						
							id: 'main-layout',
						
							template: require('../templates/layout/mainLayout'),
						
							regions: {
								banner: "header[role=banner]",
								mainContent: ".panel-body",
								footer: "footer[role=contentinfo]"
							},
						
							onRender: function(){
								this.showHome();
							},
						
							showHome: function(){
								this.mainContent.show(new HomeView());
							},
						
							showProducts: function(){
								this.mainContent.show(new ProductsView());
							},
						
							showContact: function(){
								this.mainContent.show(new ContactView());
							}
						});
					}
				},
				"products": {
					"ProductsView.js": function (exports, module, require) {
						var ProductTemplate = require('../templates/products/Product'),
						  ProductsTemplate = require('../templates/products/Products');
						
						var view = Backbone.Marionette.ItemView.extend({
							template: ProductTemplate,
							className: 'col-md-4',
						
							modelEvents: {
								"change": "render"
							},
						
							events: {
						        "click a.button": "changePrice"
						    },
						
						    changePrice: function(){
						        this.model.set("price", this.model.get("price") + 1);
						    }
						});
						
						module.exports = Backbone.Marionette.CompositeView.extend({
							template: ProductsTemplate,
							childViewContainer: "div.row.productos",
							childView: view,
						
							initialize: function(){
								this.collection = require('../../controllers/products/products')();
							}
						});
					}
				},
				"templates": {
					"Contact": {
						"Contact.js": function (exports, module, require) {
							module.exports = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
							  this.compilerInfo = [4,'>= 1.0.0'];
							helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
							  


							  return "<form role=\"form\">\r\n  <div class=\"form-group\">\r\n    <label for=\"name\">Nombre</label>\r\n    <input class=\"form-control\" id=\"name\" placeholder=\"Ingrese su nombre\">\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"email\">Email</label>\r\n    <input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Ingrese su email\">\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"consult\">Consulta</label>\r\n    <textarea class=\"form-control\" rows=\"3\" id=\"consult\" placeholder=\"Ingrese su consulta\"></textarea>\r\n  </div>\r\n  <button type=\"submit\" class=\"btn btn-default\">Enviar</button>\r\n</form>";
							  })
							;
						}
					},
					"home": {
						"home.js": function (exports, module, require) {
							module.exports = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
							  this.compilerInfo = [4,'>= 1.0.0'];
							helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
							  var stack1, functionType="function", escapeExpression=this.escapeExpression;


							  if (stack1 = helpers.description) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
							  else { stack1 = depth0.description; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
							  return escapeExpression(stack1);
							  })
							;
						}
					},
					"layout": {
						"mainLayout.js": function (exports, module, require) {
							module.exports = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
							  this.compilerInfo = [4,'>= 1.0.0'];
							helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
							  


							  return "<header role=\"banner\">\r\n	<nav class=\"navbar navbar-inverse\" role=\"navigation\">\r\n	    <div class=\"navbar-header\">\r\n	      <button type=\"button\" class=\"navbar-toggle\">\r\n	        <span class=\"sr-only\">Toggle navigation</span>\r\n	        <span class=\"icon-bar\"></span>\r\n	        <span class=\"icon-bar\"></span>\r\n	        <span class=\"icon-bar\"></span>\r\n	      </button>\r\n	      <a class=\"navbar-brand\" href=\"#\">CityAgro</a>\r\n	    </div>\r\n	    <div class=\"collapse navbar-collapse\">\r\n	      <ul class=\"nav navbar-nav\">\r\n	      	<li class=\"active\"><a href=\"#/inicio\">Inicio</a></li>\r\n	      	<li><a href=\"#/productos\">Productos</a></li>\r\n	        <li><a href=\"#/contacto\">Contacto</a></li>\r\n	      </ul>\r\n	      <form class=\"navbar-form navbar-right\" role=\"search\">\r\n	        <div class=\"form-group\">\r\n	          <input type=\"text\" class=\"form-control\" placeholder=\"Buscar\">\r\n	        </div>\r\n	        <button type=\"submit\" class=\"btn btn-default\">Buscar</button>\r\n	      </form>\r\n	    </div>\r\n	</nav>\r\n</header>\r\n<section role=\"main-content\">\r\n	<div class=\"panel panel-default\">\r\n	  <div class=\"panel-heading\">\r\n	    <h3 class=\"panel-title\">Inicio</h3>\r\n	  </div>\r\n	  <div class=\"panel-body\">\r\n	    \r\n	  </div>\r\n	</div>	\r\n</section>\r\n<footer role=\"contentinfo\">\r\n	<nav class=\"navbar navbar-inverse\" role=\"navigation\">\r\n	    <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n			<ul class=\"nav navbar-nav navbar-right\">\r\n		      	<li><p class=\"navbar-text\">Copyright 2014</p></li>\r\n	    	</ul>\r\n	    </div>\r\n	</nav>\r\n</footer>";
							  })
							;
						}
					},
					"products": {
						"Product.js": function (exports, module, require) {
							module.exports = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
							  this.compilerInfo = [4,'>= 1.0.0'];
							helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
							  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


							  buffer += "<div class=\"thumbnail\">   \r\n	<img src=";
							  if (stack1 = helpers.image) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
							  else { stack1 = depth0.image; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
							  buffer += escapeExpression(stack1)
							    + " alt=\"";
							  if (stack1 = helpers.title) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
							  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
							  buffer += escapeExpression(stack1)
							    + "\">\r\n	<div class=\"caption\">\r\n		<h3>";
							  if (stack1 = helpers.title) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
							  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
							  buffer += escapeExpression(stack1)
							    + "</h3>\r\n		<p>";
							  if (stack1 = helpers.description) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
							  else { stack1 = depth0.description; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
							  buffer += escapeExpression(stack1)
							    + "</p>\r\n	</div>\r\n</div>";
							  return buffer;
							  })
							;
						},
						"Products.js": function (exports, module, require) {
							module.exports = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
							  this.compilerInfo = [4,'>= 1.0.0'];
							helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
							  


							  return "<div class=\"row productos\"></div>";
							  })
							;
						}
					}
				}
			}
		}
	}
})("Web/app/initDev");
